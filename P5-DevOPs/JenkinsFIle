

pipeline {
    agent any // Run this pipeline on any available Jenkins agent

    environment {
        // Define an environment variable for the Docker image name
        // Replace 'your-dockerhub-username' with your actual Docker Hub username
        DOCKER_IMAGE = "your-dockerhub-username/nodejs-ci-cd-app"
    }

    stages {
        stage('Git Checkout') {
            steps {
                // Checkout the source code from the GitHub repository
                git 'https://github.com/your-github-username/your-repo-name.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                // Build the Docker image using the Dockerfile in the current directory
                script {
                    docker.build(DOCKER_IMAGE, ".")
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                // Log in to Docker Hub and push the image
                // 'dockerhub-credentials' is the ID we will create in Jenkins
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials') {
                            docker.image(DOCKER_IMAGE).push("${env.BUILD_NUMBER}")
                            docker.image(DOCKER_IMAGE).push("latest")
                        }
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                script {
                    // Check if a container with the same name is running and stop/remove it
                    sh '''
                    if [ "$(docker ps -q -f name=nodejs-app)" ]; then
                        docker stop nodejs-app
                        docker rm nodejs-app
                    fi
                    '''
                    // Run the new Docker container
                    // Map port 80 on the host to port 3000 in the container
                    sh "docker run -d --name nodejs-app -p 80:3000 ${DOCKER_IMAGE}:latest"
                }
            }
        }
    }

    post {
        always {
            // Clean up old Docker images to save space
            sh 'docker image prune -af'
        }
    }
}
